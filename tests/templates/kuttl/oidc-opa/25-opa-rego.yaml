---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-nifi-uif-rego
  labels:
    opa.stackable.tech/bundle: "true"
data:
  nifi.rego: |
    package nifi

    # Setting "resourceNotFound" to true results in the parent resource beingevaluated for authorization,
    # e.g. the parent of a processor is the processor-group.
    # If a resource is matched by a rego rule that is not the default the parent resource will be ignored.
    default allow := {
      "resourceNotFound": true
    }

    # Allow access nifi-admin for all resource types that don't have other policies in place
    # This convoluted way of writing the rule is necessary because a general allow rule for nifi-admin would result in
    # an the rego error "complete rules must not produce multiple outputs"
    allow := {
      "allowed": true,
    } if {
      resource_types_with_other_policies = [
        "/flow",
        "/process-groups",
        "/processors"
      ]
      every resource_type in resource_types_with_other_policies { not startswith(input.resource.id, resource_type) }
      groups_with_access := ["nifi-admin"]
      some group in user_groups
      group in groups_with_access
    }

    # Access to the UI for every user
    allow := {
      "allowed": true,
      "dumpCache": true
    } if {
      input.resource.id in ["/flow"]
      groups_with_access := ["nifi-admin", "nifi-user"]
      some group in user_groups
      group in groups_with_access
    }

    # Access to the root process group for every user
    allow := {
      "allowed": true,
      "dumpCache": true
    } if {
      input.resource.name == "NiFi Flow"
      startswith(input.resource.id, "/process-groups")
      groups_with_access := ["nifi-admin", "nifi-user"]
      some group in user_groups
      group in groups_with_access
    }

    # Allow access to process groups A & B only to users in the corresponding group & admin
    # Rules have to explicitly deny access because every user in group "nifi-user"
    # has inherited access to each process group for which they are not explicitly denied.
    allow := {
      "allowed": false,
    } if {
      input.resource.id == "/process-groups/c9186a05-0196-1000-ffff-ffffd8474359"
      groups_with_access := ["nifi-admin", "nifi-process-group-a"]
      every group in user_groups { not group in groups_with_access }
    }

    allow := {
      "allowed": false
    } if {
      input.resource.id == "/process-groups/7e08561b-447d-3acb-b510-744d886c3ca4"
      groups_with_access := ["nifi-admin", "nifi-process-group-b"]
      every group in user_groups { not group in groups_with_access }
    }

    allow := {
      "allowed": true,
      "dumpCache": true
    } if {
      input.identity.name == "CN=generated certificate for pod"
      input.resource.id == "/proxy"
    }

    user_groups := user_groups if {
      user_group_paths := data.stackable.opa.userinfo.v1.userInfoByUsername(input.identity.name).groups
      user_groups := [ trim(user_group,"/") | user_group := user_group_paths[_] ]
    }
