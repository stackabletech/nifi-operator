---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCluster
metadata:
  name: trino
spec:
  image:
{% if test_scenario['values']['trino-l'].find(",") > 0 %}
    custom: "{{ test_scenario['values']['trino-l'].split(',')[1] }}"
    productVersion: "{{ test_scenario['values']['trino-l'].split(',')[0] }}"
{% else %}
    productVersion: "{{ test_scenario['values']['trino-l'] }}"
{% endif %}
    pullPolicy: IfNotPresent
  clusterConfig:
    catalogLabelSelector:
      matchLabels:
        trino: trino
{% if lookup('env', 'VECTOR_AGGREGATOR') %}
    vectorAggregatorConfigMapName: vector-aggregator-discovery
{% endif %}
  coordinators:
    config:
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
{% if test_scenario['values']['iceberg-use-kerberos'] == 'true' %}
    podOverrides: &podOverrides
      spec:
        containers:
          - name: trino
            env:
              - name: KERBEROS_REALM
                value: {{ test_scenario['values']['kerberos-realm'] }}
            volumeMounts:
              - name: kerberos
                mountPath: /stackable/kerberos
              # Normally we would use a different location and set `-Djava.security.krb5.conf=/example/path/krb5.conf`,
              # but we can not influence the JVM arguments (edit: we can now).
              - name: kerberos
                mountPath: /etc/krb5.conf
                subPath: krb5.conf
        volumes:
          - name: kerberos
            ephemeral:
              volumeClaimTemplate:
                metadata:
                  annotations:
                    secrets.stackable.tech/class: kerberos-$NAMESPACE
                    secrets.stackable.tech/kerberos.service.names: trino
                    secrets.stackable.tech/scope: service=trino
                spec:
                  accessModes:
                    - ReadWriteOnce
                  resources:
                    requests:
                      storage: "1"
                  storageClassName: secrets.stackable.tech
{% endif %}
    roleGroups:
      default:
        replicas: 1
  workers:
    config:
      gracefulShutdownTimeout: 60s # Let the test run faster
      logging:
        enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
{% if test_scenario['values']['iceberg-use-kerberos'] == 'true' %}
    podOverrides: *podOverrides
{% endif %}
    roleGroups:
      default:
        replicas: 1
        config: {}
---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCatalog
metadata:
  name: iceberg
  labels:
    trino: trino
spec:
  connector:
    iceberg:
      metastore:
        configMap: hive
      s3:
        reference: minio
      hdfs:
        configMap: hdfs
{% if test_scenario['values']['iceberg-use-kerberos'] == 'true' %}
  configOverrides:
    # HDFS configuration
    hive.hdfs.authentication.type: KERBEROS
    hive.hdfs.trino.principal: trino/trino.$NAMESPACE.svc.cluster.local@{{ test_scenario['values']['kerberos-realm'] }}
    hive.hdfs.trino.keytab: /stackable/kerberos/keytab
    hive.hdfs.impersonation.enabled: "false"
    hive.hdfs.wire-encryption.enabled: "true"
    # HMS configuration
    hive.metastore.authentication.type: KERBEROS
    hive.metastore.client.principal: trino/trino.$NAMESPACE.svc.cluster.local@{{ test_scenario['values']['kerberos-realm'] }}
    hive.metastore.client.keytab: /stackable/kerberos/keytab
    hive.metastore.service.principal: hive/hive.$NAMESPACE.svc.cluster.local@{{ test_scenario['values']['kerberos-realm'] }}
    hive.metastore.thrift.impersonation.enabled: "false"
    # By default, Hive views are executed with the RUN AS DEFINER security mode. Set the hive.hive-views.run-as-invoker catalog configuration property to true to use RUN AS INVOKER semantics.
    # However, this does *not* work for Iceberg catalogs :/ (I asked on the Trino slack: https://trinodb.slack.com/archives/CJ6UC075E/p1711449384648869)
    # hive.hive-views.run-as-invoker: "true"
{% endif %}
